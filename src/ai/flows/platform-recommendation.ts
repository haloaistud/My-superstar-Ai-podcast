// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Recommends the best streaming platforms for a broadcaster's content.
 *
 * - recommendPlatforms - A function that recommends streaming platforms.
 * - PlatformRecommendationInput - The input type for the recommendPlatforms function.
 * - PlatformRecommendationOutput - The return type for the recommendPlatforms function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PlatformRecommendationInputSchema = z.object({
  audienceDemographics: z
    .string()
    .describe('Description of the target audience demographics.'),
  contentType: z.string().describe('Description of the content being streamed.'),
});
export type PlatformRecommendationInput = z.infer<
  typeof PlatformRecommendationInputSchema
>;

const PlatformRecommendationOutputSchema = z.object({
  recommendedPlatforms: z
    .array(z.string())
    .describe('A list of recommended streaming platforms.'),
  reasoning: z.string().describe('The reasoning behind the recommendations.'),
});
export type PlatformRecommendationOutput = z.infer<
  typeof PlatformRecommendationOutputSchema
>;

export async function recommendPlatforms(
  input: PlatformRecommendationInput
): Promise<PlatformRecommendationOutput> {
  return recommendPlatformsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'platformRecommendationPrompt',
  input: {
    schema: PlatformRecommendationInputSchema,
  },
  output: {
    schema: PlatformRecommendationOutputSchema,
  },
  prompt: `Based on the audience demographics: {{{audienceDemographics}}} and content type: {{{contentType}}}, recommend the best streaming platforms. Explain the reasoning for each recommendation. Return a JSON object with 'recommendedPlatforms' (an array of platform names) and 'reasoning' (a string explaining the choices).`,
});

const recommendPlatformsFlow = ai.defineFlow(
  {
    name: 'recommendPlatformsFlow',
    inputSchema: PlatformRecommendationInputSchema,
    outputSchema: PlatformRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
