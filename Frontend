// ============ REACT NATIVE FRONTEND ============
// App.js - Main Application Component
import React, { useEffect, useState } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createStackNavigator } from '@react-navigation/stack';
import { Ionicons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import Toast from 'react-native-toast-message';
import NetInfo from '@react-native-community/netinfo';
// Import screens
import AuthScreen from './src/screens/AuthScreen';
import ViewerScreen from './src/screens/ViewerScreen';
import BroadcasterScreen from './src/screens/BroadcasterScreen';
import AdminScreen from './src/screens/AdminScreen';
import StreamScreen from './src/screens/StreamScreen';
import ChatScreen from './src/screens/ChatScreen';
import ProfileScreen from './src/screens/ProfileScreen';
// Import context
import { AuthProvider, useAuth } from './src/context/AuthContext';
import { SocketProvider } from './src/context/SocketContext';
const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();
// Main App Navigator
function AppNavigator() {
const { user, isAuthenticated } = useAuth();
if (!isAuthenticated) {
return (
<Stack.Navigator screenOptions={{ headerShown: false }}>
<Stack.Screen name="Auth" component={AuthScreen} /> tabBarIcon: ({ focused, color, size }) => {
let iconName;
switch (route.name) {
case 'Viewer':
iconName = focused ? 'tv' : 'tv-outline';
break;
case 'Broadcaster':
iconName = focused ? 'radio' : 'radio-outline';
break;
case 'Admin':
iconName = focused ? 'settings' : 'settings-outline';
break;
case 'Profile':
iconName = focused ? 'person' : 'person-outline';
break;
}
return <Ionicons name={iconName} size={size} color={color} />;
},
tabBarActiveTintColor: '#667eea',
tabBarInactiveTintColor: 'gray',
headerShown: false,
})}
>
<Tab.Screen name="Viewer" component={ViewerScreen} />
{(user?.role === 'broadcaster' || user?.role === 'admin') && (
<Tab.Screen name="Broadcaster" component={BroadcasterScreen} />
)}
{user?.role === 'admin' && (
<Tab.Screen name="Admin" component={AdminScreen} />
)}
<Tab.Screen name="Profile" component={ProfileScreen} />
</Tab.Navigator>
</SocketProvider>
);
}
export default function App() {
return (
<AuthProvider>
<NavigationContainer>
<AppNavigator />
<Toast />
</NavigationContainer>
</AuthProvider> );
}
// ============ CONTEXT PROVIDERS ============
// src/context/AuthContext.js
import React, { createContext, useContext, useState, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { apiService } from '../services/apiService';
const AuthContext = createContext();
export const useAuth = () => {
const context = useContext(AuthContext);
if (!context) {
throw new Error('useAuth must be used within an AuthProvider');
}
return context;
};
export const AuthProvider = ({ children }) => {
const [user, setUser] = useState(null);
const [token, setToken] = useState(null);
const [isLoading, setIsLoading] = useState(true);
useEffect(() => {
loadStoredAuth();
}, []);
const loadStoredAuth = async () => {
try {
const storedToken = await AsyncStorage.getItem('authToken');
const storedUser = await AsyncStorage.getItem('userData');
if (storedToken && storedUser) {
setToken(storedToken);
setUser(JSON.parse(storedUser));
apiService.setAuthToken(storedToken);
}
} catch (error) {
console.error('Error loading stored auth:', error);
} finally {
setIsLoading(false);
} };
const login = async (username, password) => {
try {
const response = await apiService.login(username, password);
const { access_token, user: userData } = response.data;
await AsyncStorage.setItem('authToken', access_token);
await AsyncStorage.setItem('userData', JSON.stringify(userData));
setToken(access_token);
setUser(userData);
apiService.setAuthToken(access_token);
return { success: true };
} catch (error) {
return { success: false, error: error.message };
}
};
const register = async (username, email, password, role = 'viewer') => {
try {
const response = await apiService.register(username, email, password, role);
const { access_token, user: userData } = response.data;
await AsyncStorage.setItem('authToken', access_token);
await AsyncStorage.setItem('userData', JSON.stringify(userData));
setToken(access_token);
setUser(userData);
apiService.setAuthToken(access_token);
return { success: true };
} catch (error) {
return { success: false, error: error.message };
}
};
const logout = async () => {
try {
await AsyncStorage.removeItem('authToken');
await AsyncStorage.removeItem('userData');
setToken(null);
setUser(null); apiService.setAuthToken(null);
} catch (error) {
console.error('Error during logout:', erro
